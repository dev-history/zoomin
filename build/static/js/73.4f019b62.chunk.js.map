{"version":3,"file":"static/js/73.4f019b62.chunk.js","mappings":"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","sources":["views/launch/games/index.js","../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n// material-ui\r\nimport React from 'react';\r\nimport { Grid, Typography, TextField, Button } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router';\r\nimport { getGame } from 'services/apis/server';\r\nimport { GET_GAMES } from 'store/actions';\r\nimport { store } from 'store';\r\nimport * as Yup from 'yup';\r\nimport { FormikProvider, useFormik } from 'formik';\r\n\r\nimport ImgMediaCard from 'ui-component/cards/Skeleton/GameCard';\r\nimport { useTheme } from '@emotion/react';\r\n\r\nconst SelectGamePage = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const state = store.getState();\r\n    const [games, setGames] = useState([]);\r\n\r\n    const load = async () => {\r\n        const games = await getGame();\r\n        dispatch({ type: GET_GAMES, games: games });\r\n        console.log(games);\r\n        setGames(games);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        load();\r\n    }, []);\r\n    const validationSchema1 = Yup.object({\r\n        userlimit: Yup.number('Enter user limit').required('User limit is required'),\r\n        eventcoins: Yup.number('Enter Eventcoins').required('Eventcoins is required'),\r\n        timelimit: Yup.number('Enter Time limit').required('Time limit is required'),\r\n        rewardpool: Yup.number('Enter Prize Pool').required('Prize pool is required'),\r\n        gameid: Yup.number('Select Game').min(1, 'Game is required').required('Game is required')\r\n    });\r\n    const formik1 = useFormik({\r\n        initialValues: {\r\n            userlimit: '',\r\n            eventcoins: '',\r\n            timelimit: '',\r\n            rewardpool: '',\r\n            gameid: 0\r\n        },\r\n        validationSchema: validationSchema1,\r\n        onSubmit: (values) => {}\r\n    });\r\n    const allEvents = useSelector((state) => state.campaign);\r\n    const gameListData = allEvents.games;\r\n    console.log('allEvents:', gameListData);\r\n    const { state: navigateState } = useLocation();\r\n    console.log(navigateState);\r\n    const handleNext = (screen2) => {\r\n        navigate('/launch/subscription/index', { state: { screen2, screen1: navigateState } });\r\n    };\r\n    const [selected, setSelected] = React.useState(true);\r\n    return (\r\n        <>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={12}>\r\n                    <Grid item xs={12}>\r\n                        <Grid item sx={{ marginBottom: '45px' }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontFamily: 'Inter',\r\n                                    fontStyle: 'normal',\r\n                                    fontWeight: '700',\r\n                                    fontSize: '30px',\r\n                                    lineHeight: '36px',\r\n                                    color: '#FFFFFF'\r\n                                }}\r\n                            >\r\n                                Select Games\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            {gameListData &&\r\n                                gameListData.length != 0 &&\r\n                                gameListData.map((item, index) => {\r\n                                    return (\r\n                                        <Grid\r\n                                            onClick={() => {\r\n                                                formik1.values.gameid = item.id;\r\n                                                setSelected(!selected);\r\n                                            }}\r\n                                            xl={4}\r\n                                            lg={6}\r\n                                            md={12}\r\n                                            sm={12}\r\n                                            xs={12}\r\n                                            sx={{ paddingX: '10px', marginBottom: '25px' }}\r\n                                        >\r\n                                            <ImgMediaCard\r\n                                                card_name={item.name}\r\n                                                card_image={item.img_url}\r\n                                                key={index}\r\n                                                game_id={item.id}\r\n                                                formikvalue={formik1.values.gameid}\r\n                                            ></ImgMediaCard>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid item sx={{ marginBottom: '45px' }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontFamily: 'Inter',\r\n                                    fontStyle: 'normal',\r\n                                    fontWeight: '700',\r\n                                    fontSize: '30px',\r\n                                    lineHeight: '36px',\r\n                                    color: '#FFFFFF'\r\n                                }}\r\n                            >\r\n                                Rules\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Grid container>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"User Limit\"\r\n                                        margin=\"normal\"\r\n                                        name=\"userlimit\"\r\n                                        type=\"number\"\r\n                                        value={formik1.values.userlimit}\r\n                                        onChange={formik1.handleChange}\r\n                                        error={formik1.touched.userlimit && Boolean(formik1.errors.userlimit)}\r\n                                        helperText={formik1.touched.userlimit && formik1.errors.userlimit}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Grid container>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Event Coins\"\r\n                                        margin=\"normal\"\r\n                                        name=\"eventcoins\"\r\n                                        type=\"number\"\r\n                                        value={formik1.values.eventcoins}\r\n                                        onChange={formik1.handleChange}\r\n                                        error={formik1.touched.eventcoins && Boolean(formik1.errors.eventcoins)}\r\n                                        helperText={formik1.touched.eventcoins && formik1.errors.eventcoins}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Grid container>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Time Limit\"\r\n                                        margin=\"normal\"\r\n                                        name=\"timelimit\"\r\n                                        type=\"number\"\r\n                                        value={formik1.values.timelimit}\r\n                                        onChange={formik1.handleChange}\r\n                                        error={formik1.touched.timelimit && Boolean(formik1.errors.timelimit)}\r\n                                        helperText={formik1.touched.timelimit && formik1.errors.timelimit}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Grid container>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Pool\"\r\n                                        margin=\"normal\"\r\n                                        name=\"rewardpool\"\r\n                                        type=\"number\"\r\n                                        value={formik1.values.rewardpool}\r\n                                        onChange={formik1.handleChange}\r\n                                        error={formik1.touched.rewardpool && Boolean(formik1.errors.rewardpool)}\r\n                                        helperText={formik1.touched.rewardpool && formik1.errors.rewardpool}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        onClick={async () => {\r\n                            const errors = await formik1.validateForm();\r\n                            await formik1.submitForm();\r\n                            if (Object.keys(errors).length == 0) {\r\n                                handleNext(formik1.values);\r\n                            } else console.log('false');\r\n                        }}\r\n                        sx={{\r\n                            borderRadius: '8.8',\r\n                            backgroundColor: '#FF0676',\r\n                            width: '100px',\r\n                            height: '45px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '700',\r\n                            fontFamily: 'Inter',\r\n                            fontStyle: 'normal',\r\n                            lineHeight: '19px',\r\n                            color: '#FFFFFF'\r\n                        }}\r\n                    >\r\n                        Next\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectGamePage;\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"maxRows\", \"minRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { refType, unstable_useId as useId } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport { getTextFieldUtilityClass } from './textFieldClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n      autoComplete,\n      autoFocus = false,\n      children,\n      className,\n      color = 'primary',\n      defaultValue,\n      disabled = false,\n      error = false,\n      FormHelperTextProps,\n      fullWidth = false,\n      helperText,\n      id: idOverride,\n      InputLabelProps,\n      inputProps,\n      InputProps,\n      inputRef,\n      label,\n      maxRows,\n      minRows,\n      multiline = false,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      required = false,\n      rows,\n      select = false,\n      SelectProps,\n      type,\n      value,\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const InputMore = {};\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n    InputMore.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = /*#__PURE__*/_jsx(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/_jsxs(TextFieldRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState\n  }, other, {\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabel, _extends({\n      htmlFor: id,\n      id: inputLabelId\n    }, InputLabelProps, {\n      children: label\n    })), select ? /*#__PURE__*/_jsx(Select, _extends({\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement\n    }, SelectProps, {\n      children: children\n    })) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperText, _extends({\n      id: helperTextId\n    }, FormHelperTextProps, {\n      children: helperText\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;"],"names":["theme","useTheme","navigate","useNavigate","dispatch","useDispatch","games","setGames","store","useState","React","async","getGame","type","GET_GAMES","console","log","load","validationSchema1","Yup","userlimit","required","eventcoins","timelimit","rewardpool","gameid","min","formik1","useFormik","initialValues","validationSchema","onSubmit","values","allEvents","useSelector","state","campaign","gameListData","navigateState","useLocation","selected","setSelected","container","spacing","item","xs","sx","marginBottom","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","color","length","map","index","onClick","id","xl","lg","md","sm","paddingX","card_name","name","card_image","img_url","game_id","formikvalue","fullWidth","label","margin","value","onChange","handleChange","error","touched","Boolean","errors","helperText","typography","customInput","variant","validateForm","screen2","submitForm","Object","keys","screen1","borderRadius","backgroundColor","width","height","getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","styled","FormControl","overridesResolver","props","styles","root","inProps","ref","useThemeProps","autoComplete","autoFocus","children","className","defaultValue","disabled","FormHelperTextProps","idOverride","InputLabelProps","inputProps","InputProps","inputRef","maxRows","minRows","multiline","onBlur","onFocus","placeholder","rows","select","SelectProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","InputMore","shrink","notched","native","undefined","useId","helperTextId","inputLabelId","InputComponent","InputElement","_jsx","_jsxs","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText"],"sourceRoot":""}