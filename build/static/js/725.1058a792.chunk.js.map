{"version":3,"file":"static/js/725.1058a792.chunk.js","mappings":"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","sources":["ui-component/cards/MainCard.js","ui-component/fileUpload.js","views/launch/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    // border: border ? '1px solid' : 'none',\r\n                    borderRadius: '20px',\r\n                    backgroundColor: '#36006844',\r\n                    boxShadow: '40px 7px 132px rgb(0,0,0,0.7)',\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import React from 'react';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { getDroppedOrSelectedFiles } from 'html5-file-selector';\r\n\r\nconst FileUploadComponent = () => {\r\n    const fileParams = ({ meta }) => {\r\n        return { url: 'https://httpbin.org/post' };\r\n    };\r\n    const onFileChange = ({ meta, file }, status) => {\r\n        console.log(status, meta, file);\r\n    };\r\n    const onSubmit = (files, allFiles) => {\r\n        allFiles.forEach((f) => f.remove());\r\n    };\r\n    const getFilesFromEvent = (e) => {\r\n        return new Promise((resolve) => {\r\n            getDroppedOrSelectedFiles(e).then((chosenFiles) => {\r\n                resolve(chosenFiles.map((f) => f.fileObject));\r\n            });\r\n        });\r\n    };\r\n    const selectFileInput = ({ accept, onFiles, files, getFilesFromEvent }) => {\r\n        const textMsg = files.length > 0 ? 'Upload Again' : 'Select Files';\r\n        return (\r\n            <label className=\"btn btn-danger mt-4\">\r\n                {textMsg}\r\n                <input\r\n                    style={{ display: 'none' }}\r\n                    type=\"file\"\r\n                    accept={accept}\r\n                    multiple\r\n                    onChange={(e) => {\r\n                        getFilesFromEvent(e).then((chosenFiles) => {\r\n                            onFiles(chosenFiles);\r\n                        });\r\n                    }}\r\n                />\r\n            </label>\r\n        );\r\n    };\r\n    return (\r\n        <Dropzone\r\n            onSubmit={onSubmit}\r\n            onChangeStatus={onFileChange}\r\n            InputComponent={selectFileInput}\r\n            getUploadParams={fileParams}\r\n            getFilesFromEvent={getFilesFromEvent}\r\n            accept=\"image/*,audio/*,video/*\"\r\n            maxFiles={5}\r\n            inputContent=\"Drop A File\"\r\n            styles={{\r\n                dropzone: { width: 600, height: 400 },\r\n                dropzoneActive: { borderColor: 'green' }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default FileUploadComponent;\r\n","/* eslint-disable no-unused-vars */\r\nimport * as React from 'react';\r\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { Validate, ValidationGroup } from 'mui-validate';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    Button,\r\n    CardContent,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n    Select,\r\n    Backdrop,\r\n    CircularProgress,\r\n    Snackbar,\r\n    Alert,\r\n    Modal,\r\n    Box,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport PrizeSelect from 'ui-component/PrizeSelect';\r\nimport { FormikProvider, useFormik } from 'formik';\r\nimport { getReward, getCampaign, createPrize, getAudience, createAudience } from 'services/apis/server';\r\nimport { GET_AUDIENCES, GET_REWARDS } from 'store/actions';\r\nimport { store } from 'store';\r\nimport ReactPlayer from 'react-player';\r\nimport screenfull from 'screenfull';\r\nimport Container from '@mui/material/Container';\r\nimport FileUploadComponent from 'ui-component/fileUpload';\r\nimport Iframe from 'react-iframe';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { values } from 'lodash';\r\n// import FileUploadComponent from 'ui-component/FileUploadComponent';\r\n// import ControlIcons from 'ui-component/ControlIcon';\r\n// import DropzoneAreaExample from 'ui-component/DropzoneArea';\r\nimport Dropzone from 'react-dropzone';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n// import Previews from 'ui-component/preview_img';\r\n// import DropzoneDialogExample from 'ui-component/DropzoneDialog';\r\n// import { createPortal } from 'react-dom';\r\n\r\nconst LaunchGameView = React.forwardRef((props, ref) => <RouterLink ref={ref} to=\"/launch/games/index\" {...props} role={undefined} />);\r\nconst CreatePrize = React.forwardRef((props, ref) => <RouterLink ref={ref} to=\"/prizes/manage\" {...props} role={undefined} />);\r\nconst styles = {\r\n    root: {\r\n        'flex-direction': 'row-reverse'\r\n    }\r\n};\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst LaunchPage = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const state = store.getState();\r\n\r\n    const [videoUrl, setVideoUrl] = useState('simple');\r\n    const [value, setValue] = React.useState(null);\r\n    const [open, toggleOpen] = React.useState(false);\r\n    const [reward, setReward] = useState([]);\r\n    const [audience, setAudience] = useState([]);\r\n    const [isLoading, setLoading] = React.useState(false);\r\n    const [openModal, setOpenModal] = React.useState(false);\r\n\r\n    const { state: navigateState } = useLocation();\r\n\r\n    const navigate = useNavigate();\r\n    const allEvents = useSelector((state) => state.campaign);\r\n\r\n    const load = async () => {\r\n        const rewards = await getReward();\r\n        dispatch({ type: GET_REWARDS, rewards: rewards });\r\n        const audiences = await getAudience();\r\n        dispatch({ type: GET_AUDIENCES, audiences: audiences });\r\n        setReward(rewards);\r\n        setAudience(audiences);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        load();\r\n    }, []);\r\n    const PrizeListData = allEvents.rewards;\r\n    const AudienceListData = allEvents.audiences;\r\n    const TypeLabelList = [{ label: 'Reward' }, { label: 'Coupon' }];\r\n    const PrizeLabelList = React.useMemo(() => {\r\n        if (!PrizeListData) return [];\r\n        return PrizeListData.map((item, index) => ({ label: item.name, id: item.id, key: index }));\r\n    }, [PrizeListData]);\r\n\r\n    const validationSchema1 = Yup.object({\r\n        selectname: Yup.string('Enter Prize name').required('Name is required'),\r\n        launchdate: Yup.date('Enter Launch Date').required('Launch Date is required'),\r\n        location: Yup.string('Enter Location').required('Location is required'),\r\n        endtime: Yup.date('Enter end time').required('End time is required'),\r\n        audience: Yup.string('Enter Audience').required('Audience is required')\r\n    });\r\n\r\n    const validationSchema2 = Yup.object({\r\n        name: Yup.string('Enter name').required('Name is required'),\r\n        type: Yup.string('').required('Type is required'),\r\n        category: Yup.string('').required('Category is required'),\r\n        image_url: Yup.string('').required('Image URL is required'),\r\n        description: Yup.string('').required('Description is required'),\r\n        coinvalue: Yup.number('Coin Value must be number').required('Coin Value is required'),\r\n        timelimit: Yup.number('Time Limit must be number').required('Time Limit is required'),\r\n        ratelimit: Yup.number('Rate Limit must be number').required('Rate Limit is required')\r\n    });\r\n    const validationSchema3 = Yup.object({\r\n        prize: Yup.array().min(1).required('Prize is required')\r\n    });\r\n    const validationSchema4 = Yup.object({\r\n        videourl: Yup.string('Enter Video Url').required('Video Url is required'),\r\n        sponsorname: Yup.string('Enter Sponsor Name').required('Sponsor Name is required'),\r\n        files: Yup.array().min(1).required('Image is required')\r\n    });\r\n\r\n    const formik1 = useFormik({\r\n        initialValues: {\r\n            selectname: '',\r\n            launchdate: '',\r\n            location: '',\r\n            endtime: '',\r\n            audience: ''\r\n        },\r\n        validationSchema: validationSchema1,\r\n        onSubmit: (values) => {}\r\n    });\r\n\r\n    const formik2 = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            type: '',\r\n            category: '',\r\n            image_url: '',\r\n            description: '',\r\n            coinvalue: '',\r\n            timelimit: '',\r\n            ratelimit: '',\r\n            user: ''\r\n        },\r\n        validationSchema: validationSchema2,\r\n        onSubmit: (values) => {}\r\n    });\r\n\r\n    const formik3 = useFormik({\r\n        initialValues: {\r\n            prize: []\r\n        },\r\n        validationSchema: validationSchema3,\r\n        onSubmit: (values) => {}\r\n    });\r\n    const formik4 = useFormik({\r\n        initialValues: {\r\n            videourl: '',\r\n            sponsorname: '',\r\n            logoUrl: '',\r\n            files: []\r\n        },\r\n        validationSchema: validationSchema4,\r\n        onSubmit: (values) => {}\r\n    });\r\n\r\n    const onCreatePrize = async (values) => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await createPrize({\r\n                name: values.name,\r\n                type: values.type,\r\n                category: values.category,\r\n                image_url: values.image_url,\r\n                description: values.description,\r\n                coinvalue: values.coinvalue,\r\n                timelimit: values.timelimit,\r\n                ratelimit: values.ratelimit,\r\n                user: state.auth\r\n            });\r\n            const rewards = await getReward();\r\n            dispatch({ type: GET_REWARDS, rewards: rewards });\r\n            setLoading(false);\r\n            // navigate('/prizes/index');\r\n        } catch (e) {\r\n            console.log(e);\r\n            // setSnakebar({ open: true });\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleNext = (eventInfo, prize, sponsor) => {\r\n        navigate('/launch/games/index', { state: { eventInfo, prize, sponsor } });\r\n    };\r\n\r\n    // React.useEffect(() => {\r\n    //     async function setInitialValues() {\r\n    //         if (!navigateState) return;\r\n    //         else {\r\n    //             await formik1.setValues(navigateState.eventInfo, false);\r\n    //             // await formik3.setValues(navigateState.prizeId, false);\r\n    //         }\r\n    //     }\r\n    //     setInitialValues();\r\n    // }, [navigateState]);\r\n\r\n    const handleOpenModal = () => setOpenModal(true);\r\n    const handleCloseModal = () => setOpenModal(false);\r\n    const handleClose = () => {\r\n        setDialogValue({\r\n            label: ''\r\n        });\r\n        toggleOpen(false);\r\n    };\r\n\r\n    const [dialogValue, setDialogValue] = React.useState({\r\n        label: ''\r\n    });\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setValue({\r\n            label: dialogValue.label\r\n        });\r\n        handleClose();\r\n    };\r\n\r\n    const handleCreateAudience = async () => {\r\n        // console.log(dialogValue);\r\n        const data = await createAudience({\r\n            name: dialogValue.label\r\n        });\r\n        const audiences = await getAudience();\r\n        dispatch({ type: GET_AUDIENCES, audiences: audiences });\r\n        handleClose();\r\n    };\r\n    const AudienceLabelList = React.useMemo(() => {\r\n        if (!AudienceListData) return [];\r\n        return AudienceListData.map((item, index) => ({ label: item.name, id: item.id, key: index }));\r\n    }, [allEvents]);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && (\r\n                <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n            )}\r\n            <MainCard>\r\n                <form onSubmit={formik1.handleSubmit}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12} sx={{ marginBottom: '30px' }}>\r\n                            <Grid container alignContent=\"center\" justifyContent=\"space-between\">\r\n                                <Grid item>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontFamily: 'Inter',\r\n                                            fontStyle: 'normal',\r\n                                            fontWeight: '700',\r\n                                            fontSize: '30px',\r\n                                            lineHeight: '36px',\r\n                                            color: '#FFFFFF'\r\n                                        }}\r\n                                    >\r\n                                        Select Name & Launch Date\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Grid container>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Select Name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"selectname\"\r\n                                    type=\"text\"\r\n                                    value={formik1.values.selectname}\r\n                                    onChange={formik1.handleChange}\r\n                                    error={formik1.touched.selectname && Boolean(formik1.errors.selectname)}\r\n                                    helperText={formik1.touched.selectname && formik1.errors.selectname}\r\n                                    sx={{ ...theme.typography.customInput }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Grid container>\r\n                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                    <DatePicker\r\n                                        label=\"Launch Date\"\r\n                                        DialogProps={{\r\n                                            maxWidth: 'sm'\r\n                                        }}\r\n                                        value={formik1.values.launchdate}\r\n                                        onChange={(newValue) => {\r\n                                            formik1.setFieldValue('launchdate', newValue);\r\n                                        }}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                sx={{ ...theme.typography.customInput }}\r\n                                                error={formik1.touched.launchdate && Boolean(formik1.errors.launchdate)}\r\n                                                helperText={formik1.touched.launchdate && formik1.errors.launchdate}\r\n                                                fullWidth\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Grid container>\r\n                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                    <DatePicker\r\n                                        label=\"End Date\"\r\n                                        DialogProps={{\r\n                                            maxWidth: 'sm'\r\n                                        }}\r\n                                        value={formik1.values.endtime}\r\n                                        onChange={(newValue) => {\r\n                                            // formik1.values.endtime = newValue;\r\n                                            formik1.setFieldValue('endtime', newValue);\r\n                                        }}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                sx={{ ...theme.typography.customInput }}\r\n                                                error={formik1.touched.endtime && Boolean(formik1.errors.endtime)}\r\n                                                helperText={formik1.touched.endtime && formik1.errors.endtime}\r\n                                                fullWidth\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm v={6}>\r\n                            <Grid container>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Location\"\r\n                                    margin=\"normal\"\r\n                                    name=\"location\"\r\n                                    type=\"text\"\r\n                                    value={formik1.values.location}\r\n                                    onChange={formik1.handleChange}\r\n                                    error={formik1.touched.location && Boolean(formik1.errors.location)}\r\n                                    helperText={formik1.touched.location && formik1.errors.location}\r\n                                    sx={{ ...theme.typography.customInput }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6} sx={{ marginBottom: '50px', width: '100%' }}>\r\n                            <Grid\r\n                                container\r\n                                sx={{\r\n                                    '& .MuiAutocomplete-popper': {\r\n                                        '& .MuiPaper-root': {\r\n                                            backgroundColor: '#360068'\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <Autocomplete\r\n                                    disablePortal\r\n                                    id=\"audience_label_list\"\r\n                                    name=\"audience\"\r\n                                    options={AudienceLabelList}\r\n                                    sx={{\r\n                                        ...theme.typography.customInput\r\n                                    }}\r\n                                    onChange={(e, v) => {\r\n                                        formik1.setFieldValue('audience', v.id);\r\n                                        if (typeof v === 'string') {\r\n                                            // timeout to avoid instant validation of the dialog's form.\r\n                                            setTimeout(() => {\r\n                                                toggleOpen(true);\r\n                                                setDialogValue({\r\n                                                    label: v\r\n                                                });\r\n                                            });\r\n                                        } else if (v && v.inputValue) {\r\n                                            toggleOpen(true);\r\n                                            setDialogValue({\r\n                                                label: v.inputValue\r\n                                            });\r\n                                        } else {\r\n                                            setValue(v);\r\n                                        }\r\n                                    }}\r\n                                    getOptionLabel={(option) => {\r\n                                        // e.g value selected with enter, right from the input\r\n                                        if (typeof option === 'string') {\r\n                                            return option;\r\n                                        }\r\n                                        if (option.inputValue) {\r\n                                            return option.inputValue;\r\n                                        }\r\n                                        return option.label;\r\n                                    }}\r\n                                    filterOptions={(options, params) => {\r\n                                        const filtered = filter(options, params);\r\n\r\n                                        if (params.inputValue !== '') {\r\n                                            filtered.push({\r\n                                                inputValue: params.inputValue,\r\n                                                label: `Add \"${params.inputValue}\"`\r\n                                            });\r\n                                            console.log(filtered);\r\n                                        }\r\n\r\n                                        return filtered;\r\n                                    }}\r\n                                    renderOption={(props, option) => <li {...props}>{option.label}</li>}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            error={formik1.touched.audience && Boolean(formik1.errors.audience)}\r\n                                            helperText={formik1.touched.audience && formik1.errors.audience}\r\n                                            label=\"Select Audience\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                <Dialog open={open} onClose={handleClose}>\r\n                                    <DialogTitle>Add a new audience</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>Did you miss any audience in our list? Please, add it!</DialogContentText>\r\n                                        <TextField\r\n                                            margin=\"dense\"\r\n                                            id=\"name\"\r\n                                            name=\"label\"\r\n                                            value={dialogValue.label}\r\n                                            onChange={(event) =>\r\n                                                setDialogValue({\r\n                                                    ...dialogValue,\r\n                                                    label: event.target.value\r\n                                                })\r\n                                            }\r\n                                            label=\"label\"\r\n                                            type=\"text\"\r\n                                            variant=\"standard\"\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleClose}>Cancel</Button>\r\n                                        <Button onClick={handleCreateAudience}>Add</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n\r\n                <Grid item xs={12} sx={{ marginBottom: '30px' }}>\r\n                    <Grid container alignContent=\"center\" justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontFamily: 'Inter',\r\n                                    fontStyle: 'normal',\r\n                                    fontWeight: '700',\r\n                                    fontSize: '30px',\r\n                                    lineHeight: '36px',\r\n                                    color: '#FFFFFF'\r\n                                }}\r\n                            >\r\n                                Sponsorship\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <form onSubmit={formik4.handleSubmit}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Grid container>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Sponsor Name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"sponsorname\"\r\n                                    type=\"text\"\r\n                                    value={formik4.values.sponsorname}\r\n                                    onChange={formik4.handleChange}\r\n                                    error={formik4.touched.sponsorname && Boolean(formik4.errors.sponsorname)}\r\n                                    helperText={formik4.touched.sponsorname && formik4.errors.sponsorname}\r\n                                    sx={{ ...theme.typography.customInput }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Grid container>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Video Url\"\r\n                                    margin=\"normal\"\r\n                                    name=\"videourl\"\r\n                                    type=\"text\"\r\n                                    value={formik4.values.videourl}\r\n                                    onChange={(e) => {\r\n                                        formik4.handleChange(e);\r\n                                        setVideoUrl(e.target.value);\r\n                                    }}\r\n                                    error={formik4.touched.videourl && Boolean(formik4.errors.videourl)}\r\n                                    helperText={formik4.touched.videourl && formik4.errors.videourl}\r\n                                    sx={{ ...theme.typography.customInput }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} sx={{ cursor: 'pointer' }}>\r\n                            <Grid container sx={{ border: '1px solid #FFF', borderRadius: '12px', height: '100%' }}>\r\n                                <Dropzone\r\n                                    onDrop={(acceptedFiles) => {\r\n                                        acceptedFiles.forEach((item, index) => {\r\n                                            if (formik4.values.files.length >= 3) return;\r\n                                            formik4.values.files.push(item);\r\n                                        });\r\n                                    }}\r\n                                    maxFiles={3}\r\n                                >\r\n                                    {({ getRootProps, getInputProps, open, acceptedFiles }) => (\r\n                                        <div {...getRootProps()} style={{ height: '35vh', width: '100%', textAlign: 'center' }}>\r\n                                            <input {...getInputProps()} />\r\n\r\n                                            <img\r\n                                                src={\r\n                                                    formik4.values.logoUrl.length !== 0\r\n                                                        ? baseServerUrl + '/companies/' + formik4.values.logoUrl\r\n                                                        : ''\r\n                                                }\r\n                                                alt=\"\"\r\n                                            />\r\n                                            <p\r\n                                                style={{\r\n                                                    borderBottom: '1px solid',\r\n                                                    fontSize: '25px',\r\n                                                    margin: '0px',\r\n                                                    paddingBottom: '15px'\r\n                                                }}\r\n                                            >\r\n                                                Upload logo\r\n                                            </p>\r\n                                            <div style={{ display: 'flex', padding: '20px' }}>\r\n                                                {formik4.values.files.map((file, index) => {\r\n                                                    return (\r\n                                                        <div key={index} style={{ width: '33.33%' }}>\r\n                                                            {/* <DeleteOutlinedIcon onClick={console.log(index)} /> */}\r\n                                                            <img\r\n                                                                src={URL.createObjectURL(file)}\r\n                                                                alt=\"preview\"\r\n                                                                style={{ padding: '10px', height: '25vh', width: '100%' }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    );\r\n                                                })}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </Dropzone>\r\n                                {/* <DropzoneAreaExample /> */}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Container>\r\n                                <ReactPlayer width={'100%'} height=\"100%\" url={videoUrl} playing={true} muted={true} controls={true} />\r\n                                {/* <ControlIcons /> */}\r\n                            </Container>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Grid sx={{ height: '50px' }}></Grid>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12} sx={{ marginBottom: '30px' }}>\r\n                        <Grid container alignContent=\"center\" justifyContent=\"space-between\">\r\n                            <Grid item>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontFamily: 'Inter',\r\n                                        fontStyle: 'normal',\r\n                                        fontWeight: '700',\r\n                                        fontSize: '30px',\r\n                                        lineHeight: '36px',\r\n                                        color: '#FFFFFF'\r\n                                    }}\r\n                                >\r\n                                    Select or Create Prize\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Button\r\n                                disableElevation\r\n                                variant=\"contained\"\r\n                                onClick={handleOpenModal}\r\n                                sx={{\r\n                                    borderRadius: '8.8',\r\n                                    backgroundColor: '#04B4DD',\r\n                                    width: '185px',\r\n                                    height: '40px',\r\n                                    fontSize: '16px',\r\n                                    fontWeight: '700',\r\n                                    lineHeight: '19px',\r\n                                    fontFamily: 'Inter',\r\n                                    fontStyle: 'normal'\r\n                                }}\r\n                            >\r\n                                Create Your Prize\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <form onSubmit={formik3.handleSubmit}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12} sx={{ marginBottom: '30px', width: '100%' }}>\r\n                            <Grid\r\n                                container\r\n                                sx={{\r\n                                    '& .MuiAutocomplete-popper': {\r\n                                        '& .MuiPaper-root': {\r\n                                            backgroundColor: '#360068'\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <Autocomplete\r\n                                    disablePortal\r\n                                    multiple\r\n                                    id=\"prize_label_list\"\r\n                                    name=\"prize\"\r\n                                    options={PrizeLabelList}\r\n                                    sx={{\r\n                                        ...theme.typography.customInput\r\n                                    }}\r\n                                    onChange={(e, v) => {\r\n                                        console.log(v);\r\n                                        formik3.values.prize = [];\r\n                                        v.forEach((item, index) => {\r\n                                            console.log(item);\r\n                                            formik3.values.prize.push(item.id);\r\n                                        });\r\n                                        console.log(formik3.values.prize);\r\n                                    }}\r\n                                    renderOption={(props, option) => {\r\n                                        return (\r\n                                            <li {...props} key={option.id}>\r\n                                                {option.label}\r\n                                            </li>\r\n                                        );\r\n                                    }}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            error={formik3.touched.prize && Boolean(formik3.errors.prize)}\r\n                                            helperText={formik3.touched.prize && formik3.errors.prize}\r\n                                            label=\"Select Prizes\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Modal\r\n                    open={openModal}\r\n                    onClose={handleCloseModal}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: '50%',\r\n                            left: '50%',\r\n                            transform: 'translate(-50%, -50%)',\r\n                            width: 1400,\r\n                            bgcolor: '#360068',\r\n                            opacity: '0.88',\r\n\r\n                            border: '2px solid #000',\r\n                            boxShadow: '39.9357px 7.35657px 132.418px rgba(0, 0, 0, 0.4)',\r\n                            p: 8\r\n                        }}\r\n                    >\r\n                        <form onSubmit={formik2.handleSubmit}>\r\n                            <Grid container spacing={gridSpacing}>\r\n                                <Grid item xs={12} sx={{ width: '100%', display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>\r\n                                    <Grid container alignContent=\"center\" justifyContent=\"space-between\">\r\n                                        <Grid item>\r\n                                            <Typography\r\n                                                sx={{\r\n                                                    fontFamily: 'Inter',\r\n                                                    fontStyle: 'normal',\r\n                                                    fontWeight: '400',\r\n                                                    fontSize: '26px',\r\n                                                    lineHeight: '180%',\r\n                                                    color: '#FFFFFF',\r\n                                                    marginBottom: '30px'\r\n                                                }}\r\n                                            >\r\n                                                Please Add Your Prize\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"name\"\r\n                                            label=\"Name\"\r\n                                            margin=\"normal\"\r\n                                            name=\"name\"\r\n                                            type=\"text\"\r\n                                            value={formik2.values.name}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.name && Boolean(formik2.errors.name)}\r\n                                            helperText={formik2.touched.name && formik2.errors.name}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid\r\n                                        container\r\n                                        sx={{\r\n                                            '& .MuiAutocomplete-popper': {\r\n                                                '& .MuiPaper-root': {\r\n                                                    backgroundColor: '#360068'\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <Autocomplete\r\n                                            disablePortal\r\n                                            id=\"type_label_list\"\r\n                                            name=\"type\"\r\n                                            options={TypeLabelList}\r\n                                            sx={{\r\n                                                ...theme.typography.customInput\r\n                                            }}\r\n                                            onChange={(e, v) => {\r\n                                                formik2.setFieldValue('type', v.label);\r\n                                            }}\r\n                                            renderOption={(props, option) => {\r\n                                                return <li {...props}>{option.label}</li>;\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    error={formik2.touched.type && Boolean(formik2.errors.type)}\r\n                                                    helperText={formik2.touched.type && formik2.errors.type}\r\n                                                    label=\"Type\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Category\"\r\n                                            margin=\"normal\"\r\n                                            name=\"category\"\r\n                                            type=\"text\"\r\n                                            id=\"category\"\r\n                                            value={formik2.values.category}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.category && Boolean(formik2.errors.category)}\r\n                                            helperText={formik2.touched.category && formik2.errors.category}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Image URL\"\r\n                                            margin=\"normal\"\r\n                                            name=\"image_url\"\r\n                                            type=\"text\"\r\n                                            id=\"image_url\"\r\n                                            value={formik2.values.image_url}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.image_url && Boolean(formik2.errors.image_url)}\r\n                                            helperText={formik2.touched.image_url && formik2.errors.image_url}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Description\"\r\n                                            margin=\"normal\"\r\n                                            name=\"description\"\r\n                                            type=\"text\"\r\n                                            id=\"description\"\r\n                                            value={formik2.values.description}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.description && Boolean(formik2.errors.description)}\r\n                                            helperText={formik2.touched.description && formik2.errors.description}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Coin Value\"\r\n                                            margin=\"normal\"\r\n                                            name=\"coinvalue\"\r\n                                            type=\"number\"\r\n                                            id=\"coinvalue\"\r\n                                            value={formik2.values.coinvalue}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.coinvalue && Boolean(formik2.errors.coinvalue)}\r\n                                            helperText={formik2.touched.coinvalue && formik2.errors.coinvalue}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Rate Limit\"\r\n                                            margin=\"normal\"\r\n                                            name=\"ratelimit\"\r\n                                            type=\"number\"\r\n                                            id=\"ratelimit\"\r\n                                            value={formik2.values.ratelimit}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.ratelimit && Boolean(formik2.errors.ratelimit)}\r\n                                            helperText={formik2.touched.ratelimit && formik2.errors.ratelimit}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Time Limit\"\r\n                                            margin=\"normal\"\r\n                                            name=\"timelimit\"\r\n                                            type=\"number\"\r\n                                            id=\"timelimit\"\r\n                                            value={formik2.values.timelimit}\r\n                                            onChange={formik2.handleChange}\r\n                                            error={formik2.touched.timelimit && Boolean(formik2.errors.timelimit)}\r\n                                            helperText={formik2.touched.timelimit && formik2.errors.timelimit}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    disableElevation\r\n                                    onClick={async () => {\r\n                                        const errors = await formik2.validateForm();\r\n                                        formik2.submitForm();\r\n                                        if (Object.keys(errors).length == 0) {\r\n                                            onCreatePrize(formik2.values);\r\n                                        }\r\n                                        handleCloseModal();\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    sx={{\r\n                                        borderRadius: '8.8',\r\n                                        backgroundColor: '#FF0676',\r\n                                        width: '120px',\r\n                                        height: '40px',\r\n                                        fontSize: '16px',\r\n                                        fontWeight: '700',\r\n                                        lineHeight: '19px'\r\n                                    }}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n                    </Box>\r\n                </Modal>\r\n                <Grid item xs={3}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        onClick={async () => {\r\n                            const errors = await formik1.validateForm();\r\n                            const errors3 = await formik3.validateForm();\r\n                            const errors4 = await formik4.validateForm();\r\n                            console.log(errors4, errors, errors3);\r\n                            await formik1.submitForm();\r\n                            await formik3.submitForm();\r\n                            await formik4.submitForm();\r\n                            if (Object.keys(errors).length == 0 && Object.keys(errors3).length == 0 && Object.keys(errors4).length == 0) {\r\n                                handleNext(formik1.values, formik3.values, formik4.values);\r\n                            } else console.log('false');\r\n                        }}\r\n                        sx={{\r\n                            borderRadius: '8.8',\r\n                            backgroundColor: '#FF0676',\r\n                            width: '100px',\r\n                            height: '45px',\r\n                            fontSize: '16px',\r\n                            fontWeight: '700',\r\n                            fontFamily: 'Inter',\r\n                            fontStyle: 'normal',\r\n                            lineHeight: '19px',\r\n                            color: '#FFFFFF'\r\n                        }}\r\n                    >\r\n                        Next\r\n                    </Button>\r\n                </Grid>\r\n            </MainCard>\r\n            {/* <Snackbar anchorOrigin={{ vertical, horizontal }} open={open} autoHideDuration={5000}>\r\n                <Alert severity=\"error\">Something went wrong!</Alert>\r\n            </Snackbar> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LaunchPage;\r\n"],"names":["headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","useTheme","borderRadius","backgroundColor","action","variant","className","filter","createFilterOptions","theme","dispatch","useDispatch","state","store","videoUrl","setVideoUrl","useState","value","setValue","React","open","toggleOpen","reward","setReward","audience","setAudience","isLoading","setLoading","openModal","setOpenModal","navigateState","useLocation","navigate","useNavigate","allEvents","useSelector","campaign","async","rewards","getReward","type","GET_REWARDS","audiences","getAudience","GET_AUDIENCES","load","PrizeListData","AudienceListData","PrizeLabelList","map","item","index","label","name","id","key","validationSchema1","Yup","selectname","required","launchdate","location","endtime","validationSchema2","category","image_url","description","coinvalue","timelimit","ratelimit","validationSchema3","prize","min","validationSchema4","videourl","sponsorname","files","formik1","useFormik","initialValues","validationSchema","onSubmit","values","formik2","user","formik3","formik4","logoUrl","handleCloseModal","handleClose","setDialogValue","dialogValue","AudienceLabelList","Backdrop","color","zIndex","drawer","CircularProgress","handleSubmit","Grid","container","spacing","gridSpacing","xs","marginBottom","alignContent","justifyContent","Typography","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","sm","TextField","fullWidth","margin","onChange","handleChange","error","touched","Boolean","errors","helperText","typography","customInput","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","DialogProps","maxWidth","newValue","setFieldValue","renderInput","params","v","width","Autocomplete","disablePortal","options","e","setTimeout","inputValue","getOptionLabel","option","filterOptions","filtered","push","console","log","renderOption","props","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","event","target","DialogActions","Button","onClick","createAudience","cursor","height","onDrop","acceptedFiles","forEach","length","maxFiles","getRootProps","getInputProps","style","textAlign","src","baseServerUrl","alt","borderBottom","paddingBottom","display","padding","file","URL","createObjectURL","Container","url","playing","muted","controls","disableElevation","multiple","Modal","Box","position","top","left","transform","bgcolor","opacity","p","flexDirection","flexWrap","validateForm","submitForm","Object","keys","createPrize","auth","onCreatePrize","errors3","errors4","eventInfo","sponsor"],"sourceRoot":""}