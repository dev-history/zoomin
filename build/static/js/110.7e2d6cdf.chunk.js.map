{"version":3,"file":"static/js/110.7e2d6cdf.chunk.js","mappings":"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","sources":["hooks/useScriptRef.js","services/apis/user.js","ui-component/extended/AnimateButton.js","views/pages/authentication/AuthWrapper1.js","views/pages/authentication/auth-forms/AuthSignUp.js","views/pages/authentication/authentication/SignUp.js","../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import Api from 'services/api';\r\nimport { LOG_OUT } from 'store/actions';\r\nimport { API_USER_SIGN_IN, API_USER_SIGN_UP } from 'store/api';\r\n\r\nexport const login = async (data) => {\r\n    return Api.post(API_USER_SIGN_IN, data);\r\n};\r\n\r\nexport const signup = async (data) => {\r\n    return Api.post(API_USER_SIGN_UP, data);\r\n};\r\n\r\nexport const logout = () => {\r\n    return { type: LOG_OUT };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","/* eslint-disable no-unused-vars */\r\n// material-ui\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport BackgroundImage from 'assets/images/login-screen.jpg';\r\n\r\nconst AuthWrapper1 = styled('div')(({}) => ({\r\n    backgroundImage: `url(${BackgroundImage})`,\r\n    minHeight: '100vh',\r\n    width: '100%',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover'\r\n}));\r\n\r\nexport default AuthWrapper1;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography,\r\n    TextField\r\n} from '@mui/material';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form, useFormik } from 'formik';\r\n\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { login, logout, signup } from 'services/apis/user';\r\nimport { GET_EVENTS, GET_GAMES, GET_REWARDS, SET_TOKEN, LOG_OUT } from 'store/actions';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nimport { store } from 'store';\r\nimport { getCampaign, getGame, getReward } from 'services/apis/server';\r\n\r\nconst DashboardPage = React.forwardRef((props, ref) => <RouterLink ref={ref} to=\"/dashbaord\" {...props} role={undefined} />);\r\nconst ForgotPasswordPage = React.forwardRef((props, ref) => <RouterLink ref={ref} to=\"/auth/forgotpassword\" {...props} role={undefined} />);\r\n\r\nconst FirebaseLogin = ({ ...others }) => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const scriptedRef = useScriptRef();\r\n    const [checked, setChecked] = useState(true);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        firstname: Yup.string('Enter your first name').required('First Name is required'),\r\n        lastname: Yup.string('Enter your last name').required('Last Name is required'),\r\n        email: Yup.string('Enter your email').email('Enter a valid email').required('Email is required'),\r\n        phone: Yup.string('Enter your Phone number').required('Phone number is required'),\r\n        company: Yup.string('Enter your Company name').required('Company name is required'),\r\n        password: Yup.string('Enter your password')\r\n            .min(6, 'Password should be of minimum 6 characters length')\r\n            .required('Password is required'),\r\n        confirm: Yup.string()\r\n            .when('password', {\r\n                is: (val) => (val && val.length > 0 ? true : false),\r\n                then: Yup.string().oneOf([Yup.ref('password')], 'Both password need to be the same')\r\n            })\r\n            .max(255)\r\n            .required('Confirm is required')\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstname: '',\r\n            lastname: '',\r\n            phone: '',\r\n            company: '',\r\n            confirm: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            onSignup(values);\r\n        }\r\n    });\r\n    const state = store.getState();\r\n    const onSignup = async (values) => {\r\n        const data = await signup({\r\n            name: values.firstname,\r\n            lastname: values.lastname,\r\n            company: values.company,\r\n            phone: values.phone,\r\n            email: values.email,\r\n            password: values.password\r\n        });\r\n        console.log(data);\r\n        navigate('/auth/login');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"firstname\"\r\n                            name=\"firstname\"\r\n                            label=\"First Name\"\r\n                            value={formik.values.firstname}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.firstname && Boolean(formik.errors.firstname)}\r\n                            helperText={formik.touched.firstname && formik.errors.firstname}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"lastname\"\r\n                            name=\"lastname\"\r\n                            label=\"Last Name\"\r\n                            value={formik.values.lastname}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.lastname && Boolean(formik.errors.lastname)}\r\n                            helperText={formik.touched.lastname && formik.errors.lastname}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"company\"\r\n                            name=\"company\"\r\n                            label=\"Company Name\"\r\n                            value={formik.values.company}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.company && Boolean(formik.errors.company)}\r\n                            helperText={formik.touched.company && formik.errors.company}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            label=\"Phone Number\"\r\n                            value={formik.values.phone}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.phone && Boolean(formik.errors.phone)}\r\n                            helperText={formik.touched.phone && formik.errors.phone}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            value={formik.values.password}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"confirm\"\r\n                            name=\"confirm\"\r\n                            label=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            value={formik.values.confirm}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.confirm && Boolean(formik.errors.confirm)}\r\n                            helperText={formik.touched.confirm && formik.errors.confirm}\r\n                            sx={{ ...theme.typography.customInput }}\r\n                        />\r\n                        <Button\r\n                            disableElevation\r\n                            fullWidth\r\n                            size=\"large\"\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                                marginTop: '30px',\r\n                                backgroundColor: '#FF0676',\r\n                                borderRadius: '18px',\r\n                                height: '90px',\r\n                                fontFamily: 'Inter',\r\n                                fontStyle: 'normal',\r\n                                fontWeight: '700',\r\n                                fontSize: '27px',\r\n                                lineHeight: '34px'\r\n                            }}\r\n                        >\r\n                            Register\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FirebaseLogin;\r\n","/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Grid, Stack, Typography, useMediaQuery } from '@mui/material';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\nimport AuthWrapper1 from '../AuthWrapper1';\r\nimport AuthSignUp from '../auth-forms/AuthSignUp';\r\n\r\nconst Signup = () => {\r\n    const theme = useTheme();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <AuthWrapper1>\r\n            <PerfectScrollbar\r\n                component=\"div\"\r\n                style={{\r\n                    height: '100vh'\r\n                }}\r\n            >\r\n                <Grid container direction=\"row\" justifyContent=\"left\" alignItems=\"center\" sx={{ minHeight: '100vh' }}>\r\n                    <Grid item xs={12} md={12} sm={12} lg={7}>\r\n                        <Grid\r\n                            container\r\n                            sx={{\r\n                                width: '100%',\r\n                                marginLeft: 'auto',\r\n                                maxWidth: '1320px',\r\n                                height: '100vh',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center'\r\n                            }}\r\n                        >\r\n                            <Grid\r\n                                item\r\n                                xs={12}\r\n                                md={12}\r\n                                sm={12}\r\n                                lg={12}\r\n                                sx={{\r\n                                    marginLeft: '166px',\r\n                                    marginRight: '100px'\r\n                                }}\r\n                            >\r\n                                <Grid container alignItems=\"left\" justifyContent=\"left\">\r\n                                    <Grid item xs={12}>\r\n                                        <Grid\r\n                                            container\r\n                                            direction={matchDownSM ? 'column-reverse' : 'row'}\r\n                                            alignItems=\"left\"\r\n                                            justifyContent=\"left\"\r\n                                        >\r\n                                            <Grid item>\r\n                                                <Stack alignItems=\"left\" justifyContent=\"left\" spacing={1}>\r\n                                                    <Typography\r\n                                                        color=\"#FFFFFF\"\r\n                                                        gutterBottom\r\n                                                        fontSize={matchDownSM ? '50px' : '70px'}\r\n                                                        fontWeight=\"700\"\r\n                                                        fontStyle=\"normal\"\r\n                                                        fontFamily=\"Inter\"\r\n                                                        lineHeight=\"85px\"\r\n                                                        marginBottom=\"12px\"\r\n                                                    >\r\n                                                        Welcome.\r\n                                                    </Typography>\r\n                                                </Stack>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <AuthSignUp />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </PerfectScrollbar>\r\n        </AuthWrapper1>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"maxRows\", \"minRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { refType, unstable_useId as useId } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport { getTextFieldUtilityClass } from './textFieldClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n      autoComplete,\n      autoFocus = false,\n      children,\n      className,\n      color = 'primary',\n      defaultValue,\n      disabled = false,\n      error = false,\n      FormHelperTextProps,\n      fullWidth = false,\n      helperText,\n      id: idOverride,\n      InputLabelProps,\n      inputProps,\n      InputProps,\n      inputRef,\n      label,\n      maxRows,\n      minRows,\n      multiline = false,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      required = false,\n      rows,\n      select = false,\n      SelectProps,\n      type,\n      value,\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const InputMore = {};\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n    InputMore.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = /*#__PURE__*/_jsx(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/_jsxs(TextFieldRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState\n  }, other, {\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabel, _extends({\n      htmlFor: id,\n      id: inputLabelId\n    }, InputLabelProps, {\n      children: label\n    })), select ? /*#__PURE__*/_jsx(Select, _extends({\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement\n    }, SelectProps, {\n      children: children\n    })) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperText, _extends({\n      id: helperTextId\n    }, FormHelperTextProps, {\n      children: helperText\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;"],"names":["scripted","useRef","useEffect","current","login","async","Api","API_USER_SIGN_IN","data","signup","API_USER_SIGN_UP","logout","type","LOG_OUT","AnimateButton","forwardRef","ref","offset1","offset2","children","direction","offset","scale","x","cycleX","useCycle","y","cycleY","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","styled","backgroundImage","BackgroundImage","minHeight","width","backgroundPosition","backgroundSize","others","theme","useTheme","navigate","useDispatch","useNavigate","checked","setChecked","useScriptRef","useState","showPassword","setShowPassword","validationSchema","Yup","firstname","required","lastname","email","phone","company","password","min","confirm","when","is","val","length","then","oneOf","max","formik","useFormik","initialValues","onSubmit","values","onSignup","store","name","console","log","handleSubmit","Grid","container","spacing","gridSpacing","item","xs","TextField","fullWidth","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","sx","typography","customInput","Button","disableElevation","size","variant","marginTop","backgroundColor","borderRadius","height","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","matchDownSM","useMediaQuery","breakpoints","down","AuthWrapper1","component","style","justifyContent","alignItems","md","sm","lg","marginLeft","maxWidth","marginRight","Stack","Typography","color","gutterBottom","marginBottom","AuthSignUp","getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","FormControl","overridesResolver","props","styles","root","React","inProps","useThemeProps","autoComplete","autoFocus","className","defaultValue","disabled","FormHelperTextProps","idOverride","InputLabelProps","inputProps","InputProps","inputRef","maxRows","minRows","multiline","onBlur","onFocus","placeholder","rows","select","SelectProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","InputMore","shrink","notched","native","useId","helperTextId","inputLabelId","InputComponent","InputElement","_jsx","_jsxs","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText"],"sourceRoot":""}